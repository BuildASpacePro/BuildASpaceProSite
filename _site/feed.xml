<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://localhost:4001/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4001/" rel="alternate" type="text/html" /><updated>2025-07-16T21:17:55+01:00</updated><id>http://localhost:4001/feed.xml</id><title type="html">buildaspacepro</title><subtitle>Build A Space Pro - the minimal space programme</subtitle><entry><title type="html">8. Strategy</title><link href="http://localhost:4001/blog/strategy,/goals,/performance/8-Strategy/" rel="alternate" type="text/html" title="8. Strategy" /><published>2025-06-08T13:00:00+01:00</published><updated>2025-06-08T13:00:00+01:00</updated><id>http://localhost:4001/blog/strategy,/goals,/performance/8-Strategy</id><content type="html" xml:base="http://localhost:4001/blog/strategy,/goals,/performance/8-Strategy/"><![CDATA[<h1 id="strategy">Strategy</h1>

<p>From the Greek word “στρατηγία”, which can be separated out into στρατ- the root for “army” and ηγία- “to lead”. Not just a word used for the military, strategy carries importance in how we encounter the modern world. Good strategy can bring us good fortune. Bad strategy can lose it.</p>

<p>Strategy is not just planning - strategy acknowledges that the future is uncertain and that plans should be responsive to new surfacing problems. In a world where competitive advantage has a shrinking half-life as the rate of change increases, it’s more important than ever to have a good strategy.</p>

<p>In Richard Rumelt’s book Good Strategy/Bad Strategy (2012), he covers the three essential elements of any strategy:</p>

<h2 id="diagnosis">Diagnosis</h2>
<p>To solve a problem, you must first understand it. Without understanding what you’re trying to solve, you can’t properly solve it - which is why it’s so important to correctly diagnose the issue.</p>

<p>In aerospace, diagnosis means understanding fundamental constraints: orbital mechanics, power budgets, thermal loads, radiation environments, and launch vehicle capabilities. SpaceX’s diagnosis of the launch industry identified cost as the primary barrier - leading to reusable rockets. Similarly, Planet Labs diagnosed Earth observation as a data latency problem, not an image quality problem, spawning their CubeSat constellation approach.</p>

<h2 id="guiding-principles">Guiding principles</h2>
<p>Once the challenge is understood, guiding principles establish the logic that will drive decisions. These aren’t vague mission statements but specific approaches that create focus and eliminate alternatives.</p>

<p>Jeff Bezos’s “disagree and commit” principle accelerates decision-making when perfect information is unavailable. In aerospace, weight is often the ultimate constraint - every gram matters. This principle drives design decisions: composite materials over metals, integrated systems over modular ones, and software solutions over hardware when possible.</p>

<h2 id="coherent-action">Coherent action</h2>
<p>This final step turns concept into reality. Coherent actions are specific tasks, resource allocations, and organizational changes that align with your guiding principles. They must reinforce each other rather than work at cross-purposes.</p>

<p>Tesla’s coherent action combined vertical integration (battery manufacturing), software development (over-the-air updates), and charging infrastructure (Supercharger network). Each element amplified the others, creating a defensible moat.</p>

<h3 id="example-newspace-strategy-framework">Example: NewSpace Strategy Framework</h3>

<p><strong>Diagnosis:</strong> Traditional aerospace has 10-15 year development cycles, making it unresponsive to rapidly evolving customer needs and technological capabilities.</p>

<p><strong>Guiding Principles:</strong></p>
<ul>
  <li>Iterate rapidly with hardware-in-the-loop testing</li>
  <li>Leverage commercial off-the-shelf (COTS) components where possible</li>
  <li>Design for manufacturability from day one</li>
</ul>

<p><strong>Coherent Actions:</strong></p>
<ul>
  <li>Implement CI/CD pipelines for embedded software</li>
  <li>Establish rapid prototyping facilities with 3D printing and CNC machining</li>
  <li>Partner with established launch providers rather than developing proprietary launch capabilities</li>
  <li>Hire talent from tech companies, not just traditional aerospace</li>
</ul>

<h2 id="the-performance-connection">The Performance Connection</h2>
<p>Strategy and performance are inseparable. Every strategic decision has computational and operational implications. Choose Python for rapid prototyping but Rust for flight software. Optimize ground station protocols to minimize latency. Design constellation architectures that maximize revisit times while minimizing orbital debris risk.</p>

<p>The companies that win understand this connection between strategic thinking and technical execution. They diagnose problems correctly, establish principles that drive focus, and execute with coherent actions that compound their advantages.</p>

<p>Poor strategy in aerospace isn’t just inefficient - it’s mission-critical failure. A chain is only as strong as its weakest link and weak strategy creates the weakest links of all.</p>]]></content><author><name></name></author><category term="Strategy," /><category term="goals," /><category term="performance" /><summary type="html"><![CDATA[Strategy]]></summary></entry><entry><title type="html">7. Performance</title><link href="http://localhost:4001/blog/linux,/performance,/rust,/efficiency/7-Performance/" rel="alternate" type="text/html" title="7. Performance" /><published>2025-05-12T13:00:00+01:00</published><updated>2025-05-12T13:00:00+01:00</updated><id>http://localhost:4001/blog/linux,/performance,/rust,/efficiency/7-Performance</id><content type="html" xml:base="http://localhost:4001/blog/linux,/performance,/rust,/efficiency/7-Performance/"><![CDATA[<h1 id="performance">Performance</h1>
<p>Performance engineering is a topic that will forever remain important. We currently live in the information age and are entering the AI age - software is an asset that is low-cost, easy to change (cheaper than bending metal) and effortless to scale/deploy globally. This carries serious implications for the modern world.</p>

<h2 id="example-jpeg--mp3-compression">Example: JPEG &amp; MP3 compression</h2>
<p>Compression algorithms for JPEG (images) and MP3 (audio) reduce file sizes by orders of magnitude, slashing storage and transmission costs. For instance, streaming an MP3 at 128kbps versus uncompressed WAV at 1.4Mbps saves ~90% of banddiwth, reducing energy use in data centers and networks.</p>

<h2 id="example-internet-browsing">Example: Internet browsing</h2>
<p>If every major website optimised it’s codebase to save 10KB per page load (assuming 2 trillion page views annually), data savings could reach 20 petabytes - cutting energy use by 200-1000GWh (assuming 0.01-0.05kWh/GB). That’s approximately enough to power a small city for a year!</p>

<p>It’s evident that these small changes in how we design and use software can carry big consequences.</p>

<h2 id="personal-opinion">Personal opinion</h2>
<p>So much of the software we use today is bloated - containing too many features or too many distractions. The <a href="https://en.wikipedia.org/wiki/Enshittification">2023 word of the year</a> captures well the framework behind which many software products decline in quality over the time.</p>

<p>The Apollo 11 guidance computer had just 2048 words of RAM (16-bit) and had less computing power than any modern calculator and yet was able to take humans to the Moon and back. Simple and functional, this is an example of using dire amounts of memory to achieve a goal - something I think few engineers could do today (myself included)</p>

<h2 id="iphone-storage">iPhone Storage</h2>

<p><img src="/assets/images/iPhoneStorage.jpeg" alt="My iPhone storage" /></p>

<div style="text-align: center;"><em>Image credit: Authors</em></div>

<p>You can see even on my iPhone how much storage is taken up by apps that perform functions as simple as accessing the internet. Barebone apps typically only need UI elements, libraries, frameworks, fonts and network files to function - but today’s apps have bloated far beyond the simple functions a user desires. Analytic SDKs, media processing libraries, cached content and database files now plague these smart devices, performing functions beyond what many normal users might want.</p>

<h1 id="example-prime-numbers-in-rust">Example: Prime numbers in Rust</h1>
<p>For this I’m going to use the <a href="https://docs.rs/criterion2/latest/criterion/">Criterion crate in Rust</a> which can be added to your project toml using the following command:</p>

<p><code class="language-plaintext highlighter-rouge">cargo add criterion</code></p>

<p>As an example, I’ve got code that will calculate every prime number between 1 to 10,000. One algorithm discovers primes using division (brute force) whereas the other - <a href="https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes">Sieve of Eratosthenes</a> disregards numbers by knowing their factors (i.e. since 2 is a prime, every multiple of 2 cannot be).</p>

<p>I’ll provide <a href="https://github.com/BuildASpacePro/PRIME_BENCHMARK">a link to the repo I’ve created called PRIME BENCHMARK</a> but will also paste elements of the code below.</p>

<h2 id="setting-up-the-benchmark">Setting Up the Benchmark</h2>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">prime_benchmark</span><span class="p">(</span><span class="n">c</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Criterion</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">group</span> <span class="o">=</span> <span class="n">c</span><span class="nf">.benchmark_group</span><span class="p">(</span><span class="s">"Prime Number Algorithms"</span><span class="p">);</span>
    
    <span class="c1">// Test with different input sizes</span>
    <span class="k">for</span> <span class="n">size</span> <span class="k">in</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">5000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">]</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">group</span><span class="nf">.bench_with_input</span><span class="p">(</span><span class="nn">BenchmarkId</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"Sieve of Eratosthenes"</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="n">size</span><span class="p">,</span> <span class="p">|</span><span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">|</span> <span class="p">{</span>
            <span class="n">b</span><span class="nf">.iter</span><span class="p">(||</span> <span class="nf">sieve_of_eratosthenes</span><span class="p">(</span><span class="nf">black_box</span><span class="p">(</span><span class="n">size</span><span class="p">)));</span>
        <span class="p">});</span>
        
        <span class="n">group</span><span class="nf">.bench_with_input</span><span class="p">(</span><span class="nn">BenchmarkId</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"Trial Division"</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="n">size</span><span class="p">,</span> <span class="p">|</span><span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">size</span><span class="p">|</span> <span class="p">{</span>
            <span class="n">b</span><span class="nf">.iter</span><span class="p">(||</span> <span class="nf">trial_division</span><span class="p">(</span><span class="nf">black_box</span><span class="p">(</span><span class="n">size</span><span class="p">)));</span>
        <span class="p">});</span>
    <span class="p">}</span>
    
    <span class="n">group</span><span class="nf">.finish</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Criterion makes it easy to:</p>
<ul>
  <li>Group related benchmarks with <code class="language-plaintext highlighter-rouge">benchmark_group</code></li>
  <li>Test multiple input sizes to observe algorithm scaling</li>
  <li>Use <code class="language-plaintext highlighter-rouge">bench_with_input</code> to parameterize benchmarks</li>
  <li>Use <code class="language-plaintext highlighter-rouge">black_box</code> to prevent compiler optimization</li>
</ul>

<h2 id="memory-usage-benchmarking">Memory Usage Benchmarking</h2>

<div class="language-rust highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">pub</span> <span class="k">fn</span> <span class="nf">memory_benchmark</span><span class="p">(</span><span class="n">c</span><span class="p">:</span> <span class="o">&amp;</span><span class="k">mut</span> <span class="n">Criterion</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">group</span> <span class="o">=</span> <span class="n">c</span><span class="nf">.benchmark_group</span><span class="p">(</span><span class="s">"Memory Usage Comparison"</span><span class="p">);</span>
    
    <span class="c1">// Create a CSV file to store memory metrics</span>
    <span class="k">let</span> <span class="k">mut</span> <span class="n">memory_csv</span> <span class="o">=</span> <span class="nn">File</span><span class="p">::</span><span class="nf">create</span><span class="p">(</span><span class="s">"memory_metrics.csv"</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
    <span class="nd">writeln!</span><span class="p">(</span><span class="n">memory_csv</span><span class="p">,</span> <span class="s">"algorithm,size,peak_rss_kb,current_rss_kb,virtual_mem_bytes,virtual_mem_bytes,execution_time_ns"</span><span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
    
    <span class="k">for</span> <span class="n">size</span> <span class="k">in</span> <span class="p">[</span><span class="mi">5000</span><span class="p">,</span> <span class="mi">10000</span><span class="p">,</span> <span class="mi">15000</span><span class="p">,</span> <span class="mi">20000</span><span class="p">,</span> <span class="mi">25000</span><span class="p">,</span> <span class="mi">30000</span><span class="p">,</span> <span class="mi">35000</span><span class="p">,</span> <span class="mi">40000</span><span class="p">,</span> <span class="mi">45000</span><span class="p">,</span> <span class="mi">50000</span><span class="p">]</span><span class="nf">.iter</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Warm-up run</span>
        <span class="k">let</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">sieve_of_eratosthenes_monitored</span><span class="p">(</span><span class="o">*</span><span class="n">size</span><span class="p">);</span>
        
        <span class="c1">// Now do the actual measurement</span>
        <span class="n">group</span><span class="nf">.bench_function</span><span class="p">(</span><span class="nn">BenchmarkId</span><span class="p">::</span><span class="nf">new</span><span class="p">(</span><span class="s">"Sieve Memory"</span><span class="p">,</span> <span class="n">size</span><span class="p">),</span> <span class="p">|</span><span class="n">b</span><span class="p">|</span> <span class="p">{</span>
            <span class="n">b</span><span class="nf">.iter_with_setup</span><span class="p">(</span>
                <span class="p">||</span> <span class="p">{},</span>
                <span class="p">|</span><span class="n">_</span><span class="p">|</span> <span class="p">{</span>
                    <span class="k">let</span> <span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">metrics</span><span class="p">)</span> <span class="o">=</span> <span class="nf">sieve_of_eratosthenes_monitored</span><span class="p">(</span><span class="nf">black_box</span><span class="p">(</span><span class="o">*</span><span class="n">size</span><span class="p">));</span>
                    
                    <span class="c1">// Log metrics to CSV</span>
                    <span class="nd">writeln!</span><span class="p">(</span>
                        <span class="n">memory_csv</span><span class="p">,</span> 
                        <span class="s">"sieve,{},{},{},{},{},{}"</span><span class="p">,</span>
                        <span class="n">size</span><span class="p">,</span>
                        <span class="n">metrics</span><span class="py">.peak_rss_kb</span><span class="p">,</span>
                        <span class="n">metrics</span><span class="py">.current_rss_kb</span><span class="p">,</span>
                        <span class="n">metrics</span><span class="py">.virtual_mem_bytes</span><span class="p">,</span>
                        <span class="n">metrics</span><span class="py">.virtual_mem_bytes</span><span class="p">,</span>
                        <span class="n">metrics</span><span class="py">.execution_time</span><span class="nf">.as_nanos</span><span class="p">()</span>
                    <span class="p">)</span><span class="nf">.unwrap</span><span class="p">();</span>
                    
                    <span class="n">metrics</span>
                <span class="p">}</span>
            <span class="p">)</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>
<h2 id="algorithmic-differences">Algorithmic Differences</h2>

<p>The Sieve of Eratosthenes creates a boolean array of size n+1, meaning its memory usage scales linearly with input size. Trial division builds a vector of primes that grows more slowly (approximately n/ln(n) elements), but performs many more comparisons.</p>

<p>Criterion helps quantify these tradeoffs precisely, allowing developers to make informed decisions based on specific constraints.</p>

<p><img src="/assets/images/algograph.png" alt="Comparison of algorithm efficiency" /></p>

<div style="text-align: center;"><em>Comparison of algorithm efficency</em></div>

<p>As shown in the graph above, for more prime numbers that are searched for, the time taken will increase for both algorithms - but since the Sieve of Eratosthenes (an algorithm over 2000 years old!) is more efficient, it takes much less time.</p>

<h2 id="conclusion">Conclusion</h2>
<p>Performance engineering isn’t just about making hardware and software run faster, it’s about creating more efficient technology for the world to use. At scale, deployment of these technologies will have profound effects on society, the economy and the way people live their lives. One can only hope that the future is free from the bloatware that seems to forever plague the world.</p>]]></content><author><name></name></author><category term="Linux," /><category term="Performance," /><category term="Rust," /><category term="Efficiency" /><summary type="html"><![CDATA[Performance Performance engineering is a topic that will forever remain important. We currently live in the information age and are entering the AI age - software is an asset that is low-cost, easy to change (cheaper than bending metal) and effortless to scale/deploy globally. This carries serious implications for the modern world.]]></summary></entry><entry><title type="html">6. Linux</title><link href="http://localhost:4001/blog/space,/ground,/linux/6-Linux/" rel="alternate" type="text/html" title="6. Linux" /><published>2025-04-26T13:00:00+01:00</published><updated>2025-04-26T13:00:00+01:00</updated><id>http://localhost:4001/blog/space,/ground,/linux/6-Linux</id><content type="html" xml:base="http://localhost:4001/blog/space,/ground,/linux/6-Linux/"><![CDATA[<h1 id="linux">Linux</h1>

<p>If you’re an engineer, you’ll likely come across Linux and some of it’s many distributions (like Ubuntu, Fedora, Debian, or CentOS). This operating system is different from Windows (although similar in roots to MacOS) - in the sense there’s less “bloat” and more customisation available for the keen user.</p>

<p>Understanding Linux often involves comparing it to the operating systems you might use daily. Unlike the proprietary nature and distinct architecture of Microsoft Windows (think NTFS file systems and PowerShell/CMD), Linux is built on the principles of open-source development. This leads to greater transparency, flexibility, and often a more command-line-centric approach favored by many technical users, though powerful graphical interfaces are readily available. Interestingly, Linux shares significant similarities with Apple’s macOS. Both operating systems are UNIX-like, adhering to POSIX standards. This shared heritage means they possess comparable command-line tools (like bash or zsh), file system hierarchies, and programming interfaces, making the transition between them often smoother for developers and engineers compared to moving between Windows and either Linux or macOS.</p>

<h2 id="origins">Origins</h2>

<p>Linus Torvalds famously wrote in 1991 that Linux was “just a hobby, won’t be big and professional like GNU.” Today, Linux powers much of the digital world, running on approximately 96% of the top one million web servers and dominates the supercomputing industry with over 90% market share.</p>

<h2 id="why-linux-is-crucial-in-engineering">Why Linux is Crucial in Engineering</h2>

<p>The prevalence of Linux in engineering isn’t accidental; it stems from fundamental advantages that align perfectly with the demands of technical fields.</p>

<h3 id="the-kernel-advantage-and-real-time-capabilities">The Kernel Advantage and Real-Time Capabilities</h3>

<p>One of Linux’s greatest strengths lies in its kernel – the central component managing the system’s hardware and software resources. Being open-source, the Linux kernel is incredibly transparent and customizable. Engineers can inspect, modify, and optimize the kernel for specific hardware or performance requirements – a level of control simply unavailable in proprietary systems.</p>

<p>For many engineering applications, particularly in fields like robotics, embedded systems, data acquisition, and industrial control, deterministic timing is critical. Standard operating systems aren’t typically designed for strict real-time performance, meaning they can’t guarantee a response within a specific, short timeframe. However, the Linux kernel can be significantly enhanced with patches like <code class="language-plaintext highlighter-rouge">PREEMPT_RT</code> (Real-Time Preemption). This patch set modifies the kernel to minimize non-preemptible sections, significantly reducing system latency and allowing it to respond to external events within more predictable time constraints. While achieving true hard real-time might require specialized hardware and further tuning, <code class="language-plaintext highlighter-rouge">PREEMPT_RT</code> brings standard Linux much closer to the capabilities of a dedicated Real-Time Operating System (RTOS), making it suitable for a wider range of time-sensitive engineering tasks directly on more general-purpose hardware.</p>

<h3 id="a-rich-software-ecosystem">A Rich Software Ecosystem</h3>

<p>Beyond the kernel, the Linux ecosystem boasts a vast and growing library of software essential for engineering work. This includes powerful open-source tools for:</p>

<ul>
  <li><strong>Software Development:</strong> Compilers (GCC, Clang), debuggers (GDB), version control (Git), build systems (Make, CMake).</li>
  <li><strong>Scientific Computing &amp; Data Analysis:</strong> Python (with NumPy, SciPy, Pandas, Matplotlib), R, Julia, Octave (a MATLAB alternative).</li>
  <li><strong>CAD/CAE/CFD:</strong> FreeCAD, OpenFOAM, Salome, Elmer FEM, alongside increasing support from commercial vendors.</li>
  <li><strong>Networking &amp; Systems Administration:</strong> Countless tools for monitoring, configuring, and securing systems and networks.</li>
  <li><strong>Embedded Development:</strong> Cross-compilation toolchains, device simulators, and board support packages.</li>
</ul>

<p>Furthermore, many major commercial engineering software vendors now provide native Linux versions of their applications (e.g., MATLAB, ANSYS, Siemens NX, COMSOL Multiphysics), recognizing its dominance in research, high-performance computing (HPC), and demanding development environments. The ease of scripting and automating workflows using shell scripts or languages like Python further enhances productivity on Linux platforms.</p>]]></content><author><name></name></author><category term="space," /><category term="ground," /><category term="Linux" /><summary type="html"><![CDATA[Linux]]></summary></entry><entry><title type="html">5. Linking the whole chain</title><link href="http://localhost:4001/blog/chain,/space,/ground/5-chain/" rel="alternate" type="text/html" title="5. Linking the whole chain" /><published>2025-04-26T13:00:00+01:00</published><updated>2025-04-26T13:00:00+01:00</updated><id>http://localhost:4001/blog/chain,/space,/ground/5-chain</id><content type="html" xml:base="http://localhost:4001/blog/chain,/space,/ground/5-chain/"><![CDATA[<p>To illustrate the point I’m going to make, I’m going to use an analogy. 
Imagine a metal chain, built by interleaving individual links together and able to tether two things together. No matter how strong previous links in the chain are - it’s only as strong as the weakest link. In other words, strengthening links two and three won’t improve the strength of link 4, which might be weakened from corrosion or the elements. This determines the tensile stress of the chain.</p>

<p>In the same way, a space program is only as strong as the weakest element. Imagine the most basic chain required to send data to a satellite: Mission Control software &gt; Ground Station network &gt; RF modem &gt; amplifier &gt; Ground station antenna &gt; through the atmosphere &gt; satellite antenna &gt; Low Noise Amplifier &gt; RF modem &gt; satellite On-board Computer (OBC). This kind of chain may look different depending on architecture or implementation, but the point remains - if you remove the RF modem, then no data gets to the satellite. Or if the link budget doesn’t have enough margin, then the satellite won’t pick up the data through the noise. Strengthening the ground station amplifier won’t help if the satellite OBC keeps failing.</p>

<p>This is often why space programs include redundancy within system designs, so that even if one part of the link in the chain fails, another can take it’s place. This is also why teams are multi-disciplinary and not homogenous - no amount of software engineers could replace an expert RF engineer. It takes different skillsets and knowledge bases to build and support the kind of systems that make a space program function.</p>]]></content><author><name></name></author><category term="chain," /><category term="space," /><category term="ground" /><summary type="html"><![CDATA[To illustrate the point I’m going to make, I’m going to use an analogy. Imagine a metal chain, built by interleaving individual links together and able to tether two things together. No matter how strong previous links in the chain are - it’s only as strong as the weakest link. In other words, strengthening links two and three won’t improve the strength of link 4, which might be weakened from corrosion or the elements. This determines the tensile stress of the chain.]]></summary></entry><entry><title type="html">4. Procedures</title><link href="http://localhost:4001/blog/tools/openc3/4-Procedures/" rel="alternate" type="text/html" title="4. Procedures" /><published>2025-04-23T13:00:00+01:00</published><updated>2025-04-23T13:00:00+01:00</updated><id>http://localhost:4001/blog/tools/openc3/4-Procedures</id><content type="html" xml:base="http://localhost:4001/blog/tools/openc3/4-Procedures/"><![CDATA[<p>In this article, we’ll explore the importance of procedures in spacecraft operations and provide an example procedure template.</p>

<hr />

<h3 id="the-importance-of-procedures-in-spacecraft-operations">The Importance of Procedures in Spacecraft Operations</h3>

<p>Spacecraft operations are complex and require precise execution of tasks to ensure mission success. Procedures provide a structured approach to performing these tasks, reducing the likelihood of human error. By following well-documented procedures, operators can:</p>
<ul>
  <li>Ensure consistency in operations.</li>
  <li>Minimize the risk of overlooking critical steps.</li>
  <li>Facilitate troubleshooting by providing a clear record of actions taken.</li>
</ul>

<p>In high-stakes environments like spacecraft operations, even a small mistake can lead to mission failure. Procedures act as a safeguard, guiding operators through each step and ensuring that tasks are performed correctly and in the right order.</p>

<hr />

<h3 id="example-procedure-template">Example Procedure Template</h3>

<p>Below is an example procedure template formatted into an 8-row, 3-column table. You can populate it with specific steps and instructions for your spacecraft operations:</p>

<table>
  <thead>
    <tr>
      <th><strong>Step</strong></th>
      <th><strong>Action</strong></th>
      <th><strong>Expected Outcome</strong></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1</td>
      <td>Initialize the system</td>
      <td>System powers on successfully</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Verify telemetry connection</td>
      <td>Telemetry data is received</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Configure spacecraft settings</td>
      <td>Settings are applied correctly</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Send command A</td>
      <td>Command is acknowledged</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Monitor response</td>
      <td>Expected telemetry is observed</td>
    </tr>
    <tr>
      <td>6</td>
      <td>Execute maneuver</td>
      <td>Spacecraft adjusts trajectory</td>
    </tr>
    <tr>
      <td>7</td>
      <td>Log operation details</td>
      <td>Logs are updated</td>
    </tr>
    <tr>
      <td>8</td>
      <td>Shut down system</td>
      <td>System powers off safely</td>
    </tr>
  </tbody>
</table>

<hr />

<h3 id="why-following-procedures-reduces-human-error">Why Following Procedures Reduces Human Error</h3>

<p>Human error is one of the leading causes of failures in spacecraft operations. Procedures help mitigate this risk by:</p>
<ul>
  <li>Providing a clear, step-by-step guide that reduces reliance on memory.</li>
  <li>Standardizing operations, ensuring that all operators follow the same process.</li>
  <li>Highlighting critical steps that must not be skipped.</li>
  <li>Allowing for pre-defined contingencies in case of unexpected events.</li>
</ul>

<p>By adhering to procedures, operators can focus on executing tasks rather than improvising, which is especially important in high-pressure situations.</p>

<hr />]]></content><author><name></name></author><category term="tools" /><category term="openc3" /><summary type="html"><![CDATA[In this article, we’ll explore the importance of procedures in spacecraft operations and provide an example procedure template.]]></summary></entry><entry><title type="html">3. Getting Started with Visual Studio Code</title><link href="http://localhost:4001/blog/tools/vscode/3-visual-studio-code/" rel="alternate" type="text/html" title="3. Getting Started with Visual Studio Code" /><published>2025-04-20T13:00:00+01:00</published><updated>2025-04-20T13:00:00+01:00</updated><id>http://localhost:4001/blog/tools/vscode/3-visual-studio-code</id><content type="html" xml:base="http://localhost:4001/blog/tools/vscode/3-visual-studio-code/"><![CDATA[<p>Visual Studio Code (VS Code) is a lightweight, powerful code editor with support for extensions and debugging.</p>

<h3 id="why-vs-code-is-a-great-ide">Why VS Code is a Great IDE</h3>

<p>VS Code is an indispensable tool for writing code used in satellites, ground stations, and managing space assets. Its customizability, support for multiple programming languages, and powerful debugging tools make it ideal for developing reliable and efficient software for critical space operations. Features like IntelliSense and integrated terminals streamline workflows, ensuring precision and productivity in space-related projects.</p>

<h3 id="installation">Installation</h3>

<ol>
  <li>Visit the <a href="https://code.visualstudio.com/">VS Code website</a>.</li>
  <li>Download the installer for your operating system.</li>
  <li>Follow the installation instructions.</li>
</ol>

<h3 id="basic-tutorial">Basic Tutorial</h3>

<ol>
  <li>Open VS Code and create a new file (<code class="language-plaintext highlighter-rouge">File &gt; New File</code>).</li>
  <li>Install extensions like Python or Markdown support from the Extensions Marketplace.</li>
  <li>Use the integrated terminal (<code class="language-plaintext highlighter-rouge">Ctrl + ~</code>) to run commands.</li>
</ol>

<h3 id="using-git-in-vs-code">Using Git in VS Code</h3>

<ol>
  <li>Open the Source Control view (<code class="language-plaintext highlighter-rouge">Ctrl + Shift + G</code>).</li>
  <li>Stage changes by clicking the <code class="language-plaintext highlighter-rouge">+</code> icon next to modified files.</li>
  <li>Commit changes with a message in the input box and press <code class="language-plaintext highlighter-rouge">Ctrl + Enter</code>. Committing saves a snapshot of your changes locally.</li>
  <li>Push changes to a remote repository using the <code class="language-plaintext highlighter-rouge">...</code> menu or <code class="language-plaintext highlighter-rouge">Ctrl + Shift + P</code> &gt; <code class="language-plaintext highlighter-rouge">Git: Push</code>. Pushing uploads your committed changes to a shared repository, making them accessible to collaborators.</li>
  <li>Pull updates from the remote repository using <code class="language-plaintext highlighter-rouge">Git: Pull</code>. Pulling fetches the latest changes from the shared repository and integrates them into your local codebase.</li>
</ol>

<p>Version control is essential for tracking changes, collaborating with teams, and ensuring code stability during deployment, especially in high-stakes environments like space systems.</p>

<h3 id="using-copilot-responsibly">Using Copilot Responsibly</h3>

<p>GitHub Copilot can assist in writing and modifying code by suggesting context-aware snippets. To enable Copilot in VS Code:</p>
<ol>
  <li>Install the GitHub Copilot extension from the Extensions Marketplace.</li>
  <li>Sign in with your GitHub account and activate Copilot in the settings.</li>
</ol>

<p>Always review and test AI-generated code to ensure it meets your requirements. A safe workflow is human (prompt) &gt; AI (suggestion) &gt; human (validation), avoiding direct copying to maintain quality and accountability.</p>

<p>VS Code is an essential tool for writing and debugging code for spacecraft systems.</p>]]></content><author><name></name></author><category term="tools" /><category term="vscode" /><summary type="html"><![CDATA[Visual Studio Code (VS Code) is a lightweight, powerful code editor with support for extensions and debugging.]]></summary></entry><entry><title type="html">2. Packets</title><link href="http://localhost:4001/blog/packets,/networking,/ip/1-Packets/" rel="alternate" type="text/html" title="2. Packets" /><published>2025-04-15T13:00:00+01:00</published><updated>2025-04-15T13:00:00+01:00</updated><id>http://localhost:4001/blog/packets,/networking,/ip/1-Packets</id><content type="html" xml:base="http://localhost:4001/blog/packets,/networking,/ip/1-Packets/"><![CDATA[<p>When I started as an aerospace engineer, I didn’t realise that packets <strong>dominate</strong> the digital world. From your smartphone, Wi-Fi router, computer, and smart devices – all these machines use digital ‘packets’ of data to communicate with other machines in a network. It didn’t help that when I began work, I didn’t even know what packets looked like – despite using them every day!</p>

<p>We all know that computers talk in binary (1s and 0s) using formatted units of data arranged into packets. These packets are stored in <strong>frames</strong>, which are the basic units of communication at the data link layer. Frames encapsulate packets with additional information, such as source and destination addresses, and can be analyzed using tools like Wireshark. Wireshark allows you to see how packets are stored in frames and how they travel across a network.</p>

<h3 id="installing-wireshark-on-ubuntu">Installing Wireshark on Ubuntu</h3>

<p>To install Wireshark on Ubuntu, open your terminal and run the following commands:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="go">sudo apt update
sudo apt install wireshark -y</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h3 id="installing-wireshark-on-windows">Installing Wireshark on Windows</h3>

<p>To install Wireshark on Windows, follow these steps:</p>

<ol>
  <li>Visit the <a href="https://www.wireshark.org/download.html">Wireshark download page</a>.</li>
  <li>Download the installer for Windows.</li>
  <li>Run the installer and follow the on-screen instructions.</li>
  <li>During installation, you may be prompted to install additional components like <strong>Npcap</strong> (required for packet capturing). Make sure to install it.</li>
</ol>

<h3 id="installing-wireshark-on-macos">Installing Wireshark on macOS</h3>

<p>To install Wireshark on macOS, use the following command in the terminal:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="go">brew install --cask wireshark</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>If you don’t have Homebrew installed, you can install it first by running:</p>

<figure class="highlight"><pre><code class="language-console" data-lang="console"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="gp">/bin/bash -c "$</span><span class="o">(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="o">)</span><span class="s2">"</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Alternatively, you can download the installer from the <a href="https://www.wireshark.org/download.html">Wireshark website</a> and follow the installation instructions.</p>

<h3 id="packets-and-satellites">Packets and Satellites</h3>

<p>Packets are not just limited to terrestrial networks; they are also the backbone of satellite communications. Satellites use packets to send and receive data between ground stations and other satellites. These packets are transmitted over radio frequencies and are formatted to include error correction and synchronization data to ensure reliable communication over vast distances.</p>

<p>Wireshark can be used to analyze satellite communication packets if you have access to the appropriate data streams. This makes it an invaluable tool for understanding how data is transmitted in space, whether for GPS, weather monitoring, or internet services provided by satellite constellations.</p>

<hr />

<p>Understanding packets is fundamental to networking, whether you’re troubleshooting a local network or working on cutting-edge satellite systems. Tools like Wireshark make it easier to visualize and analyze these packets, helping engineers and enthusiasts alike to dive deeper into the world of digital communication.</p>]]></content><author><name></name></author><category term="packets," /><category term="networking," /><category term="IP" /><summary type="html"><![CDATA[When I started as an aerospace engineer, I didn’t realise that packets dominate the digital world. From your smartphone, Wi-Fi router, computer, and smart devices – all these machines use digital ‘packets’ of data to communicate with other machines in a network. It didn’t help that when I began work, I didn’t even know what packets looked like – despite using them every day!]]></summary></entry><entry><title type="html">1. Tools</title><link href="http://localhost:4001/blog/design,/satellite,/space/program,/tools/2-Communications-copy/" rel="alternate" type="text/html" title="1. Tools" /><published>2025-04-13T13:00:00+01:00</published><updated>2025-04-13T13:00:00+01:00</updated><id>http://localhost:4001/blog/design,/satellite,/space/program,/tools/2-Communications%20copy</id><content type="html" xml:base="http://localhost:4001/blog/design,/satellite,/space/program,/tools/2-Communications-copy/"><![CDATA[<p>In this post, I’m going to list all the sofrware tools needed to build a space program. This list isn’t exhaustive, but should provide an engineer with enough to build a Minimum Viable Product (MVP).</p>

<ol>
  <li>Visual Studio Code</li>
  <li>ANSYS STK</li>
  <li>NASA’S COSMOGRAPHIA</li>
  <li>OpenC3</li>
  <li>python Skyfield module</li>
  <li>GNUradio</li>
  <li>Solidworks</li>
</ol>]]></content><author><name></name></author><category term="design," /><category term="satellite," /><category term="space" /><category term="program," /><category term="tools" /><summary type="html"><![CDATA[In this post, I’m going to list all the sofrware tools needed to build a space program. This list isn’t exhaustive, but should provide an engineer with enough to build a Minimum Viable Product (MVP).]]></summary></entry></feed>